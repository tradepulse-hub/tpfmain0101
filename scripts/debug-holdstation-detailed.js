console.log("üîç Debug detalhado do Holdstation SDK...")

async function debugHoldstationDetailed() {
  try {
    // Importar os m√≥dulos
    console.log("üì¶ Importando m√≥dulos...")
    const HoldstationModule = await import("@holdstation/worldchain-sdk")
    const EthersModule = await import("@holdstation/worldchain-ethers-v6")

    console.log("‚úÖ M√≥dulos importados!")
    console.log("SDK exports:", Object.keys(HoldstationModule))
    console.log("Ethers exports:", Object.keys(EthersModule))

    // Testar Client
    const { Client } = EthersModule
    console.log("\nüîß Testando Client...")
    console.log("Client type:", typeof Client)

    if (Client) {
      try {
        // Testar diferentes configura√ß√µes
        const configs = [
          {
            rpcUrl: "https://worldchain-mainnet.g.alchemy.com/public",
            chainId: 480,
          },
          {
            rpc: "https://worldchain-mainnet.g.alchemy.com/public",
            chain: 480,
          },
          {
            provider: "https://worldchain-mainnet.g.alchemy.com/public",
          },
          {
            url: "https://worldchain-mainnet.g.alchemy.com/public",
          },
          {}, // Vazio
        ]

        for (let i = 0; i < configs.length; i++) {
          try {
            console.log(`\nüîÑ Tentando config ${i + 1}:`, configs[i])
            const client = new Client(configs[i])
            console.log(`‚úÖ Config ${i + 1} funcionou!`)
            console.log("Client methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(client)))
            console.log("Client properties:", Object.keys(client))
            break
          } catch (error) {
            console.log(`‚ùå Config ${i + 1} falhou:`, error.message)
          }
        }
      } catch (error) {
        console.log("‚ùå Erro geral no Client:", error.message)
      }
    }

    // Testar Manager
    const { Manager } = HoldstationModule
    console.log("\nüîß Testando Manager...")
    console.log("Manager type:", typeof Manager)

    if (Manager) {
      try {
        const manager = new Manager()
        console.log("‚úÖ Manager criado!")
        console.log("Manager methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(manager)))
        console.log("Manager properties:", Object.keys(manager))

        // Testar se tem m√©todo setClient
        if (typeof manager.setClient === "function") {
          console.log("‚úÖ Manager tem m√©todo setClient!")
        } else {
          console.log("‚ö†Ô∏è Manager N√ÉO tem m√©todo setClient")
        }
      } catch (error) {
        console.log("‚ùå Erro no Manager:", error.message)
      }
    }

    // Testar SwapHelper
    const { SwapHelper } = HoldstationModule
    console.log("\nüîß Testando SwapHelper...")
    console.log("SwapHelper type:", typeof SwapHelper)

    if (SwapHelper) {
      try {
        const swapHelper = new SwapHelper()
        console.log("‚úÖ SwapHelper criado!")
        console.log("SwapHelper methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(swapHelper)))
        console.log("SwapHelper properties:", Object.keys(swapHelper))

        // Testar se tem m√©todo setClient
        if (typeof swapHelper.setClient === "function") {
          console.log("‚úÖ SwapHelper tem m√©todo setClient!")
        } else {
          console.log("‚ö†Ô∏è SwapHelper N√ÉO tem m√©todo setClient")
        }
      } catch (error) {
        console.log("‚ùå Erro no SwapHelper:", error.message)
      }
    }

    // Verificar defaultWorldchainConfig
    const { defaultWorldchainConfig } = HoldstationModule
    console.log("\nüìã defaultWorldchainConfig:", defaultWorldchainConfig)
  } catch (error) {
    console.error("‚ùå Erro geral:", error)
  }
}

debugHoldstationDetailed()
