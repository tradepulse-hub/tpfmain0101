import type { TokenBalance, SwapQuote } from "./types"
import { ethers } from "ethers"

// Configura√ß√£o para Worldchain conforme documenta√ß√£o
const WORLDCHAIN_CONFIG = {
  chainId: 480,
  rpcUrl: "https://worldchain-mainnet.g.alchemy.com/public",
  name: "worldchain",
}

// Tokens suportados pela Holdstation
const SUPPORTED_TOKENS = {
  WLD: "0x2cFc85d8E48F8EAB294be644d9E25C3030863003",
  TPF: "0x834a73c0a83F3BCe349A116FFB2A4c2d1C651E45",
  DNA: "0xED49fE44fD4249A09843C2Ba4bba7e50BECa7113",
  WDD: "0xEdE54d9c024ee80C85ec0a75eD2d8774c7Fbac9B",
}

console.log("üöÄ HOLDSTATION SERVICE - SEGUINDO DOCUMENTA√á√ÉO OFICIAL")

class HoldstationService {
  private client: any = null
  private manager: any = null
  private walletHistory: any = null
  private multicall3: any = null
  private tokenProvider: any = null
  private quoter: any = null
  private swapHelper: any = null
  private provider: any = null
  private config: any = null
  private initialized = false

  constructor() {
    console.log("üîß HoldstationService constructor - SEGUINDO DOCS")
  }

  private async initialize() {
    if (this.initialized) return

    try {
      console.log("üöÄ Inicializando conforme DOCUMENTA√á√ÉO OFICIAL...")

      // 1. Importar m√≥dulos conforme documenta√ß√£o
      console.log("üì¶ Importando m√≥dulos...")
      const [HoldstationModule, EthersModule] = await Promise.all([
        import("@holdstation/worldchain-sdk"),
        import("@holdstation/worldchain-ethers-v6"),
      ])

      console.log("‚úÖ M√≥dulos importados!")
      console.log("üìã HoldstationModule exports:", Object.keys(HoldstationModule))
      console.log("üìã EthersModule exports:", Object.keys(EthersModule))

      // 2. Extrair componentes conforme documenta√ß√£o
      const { config, inmemoryTokenStorage, TokenProvider } = HoldstationModule
      const { Client, Multicall3, Quoter, SwapHelper } = EthersModule

      console.log("‚úÖ Componentes extra√≠dos conforme docs!")

      // 3. Criar provider ethers v6
      console.log("üîß Criando provider ethers v6...")
      this.provider = new ethers.JsonRpcProvider(WORLDCHAIN_CONFIG.rpcUrl, {
        chainId: WORLDCHAIN_CONFIG.chainId,
        name: WORLDCHAIN_CONFIG.name,
      })

      // 4. Aguardar rede estar pronta
      console.log("‚è≥ Aguardando rede...")
      const network = await this.provider.getNetwork()
      const blockNumber = await this.provider.getBlockNumber()
      console.log(`‚úÖ Rede pronta: ${network.name} (${network.chainId}) - Block: ${blockNumber}`)

      // 5. Criar Client conforme documenta√ß√£o
      console.log("üîß Criando Client conforme docs...")
      this.client = new Client(this.provider)
      console.log("‚úÖ Client criado!")

      // 6. Criar Multicall3 conforme documenta√ß√£o
      console.log("üîß Criando Multicall3...")
      this.multicall3 = new Multicall3(this.provider)
      console.log("‚úÖ Multicall3 criado!")

      // 7. CONFIGURAR CONFIG GLOBAL conforme documenta√ß√£o
      console.log("üîß Configurando config global conforme docs...")
      this.config = config
      this.config.client = this.client
      this.config.multicall3 = this.multicall3
      console.log("‚úÖ Config global configurado!")

      // 8. Criar TokenProvider conforme documenta√ß√£o
      console.log("üîß Criando TokenProvider conforme docs...")
      this.tokenProvider = new TokenProvider({
        client: this.client,
        multicall3: this.multicall3,
        storage: inmemoryTokenStorage,
      })
      console.log("‚úÖ TokenProvider criado!")

      // 9. Criar Quoter conforme documenta√ß√£o
      console.log("üîß Criando Quoter conforme docs...")
      this.quoter = new Quoter(this.client)
      console.log("‚úÖ Quoter criado!")

      // 10. Criar SwapHelper conforme documenta√ß√£o
      console.log("üîß Criando SwapHelper conforme docs...")
      this.swapHelper = new SwapHelper(this.client, {
        tokenStorage: inmemoryTokenStorage,
      })
      console.log("‚úÖ SwapHelper criado!")

      // 11. Carregar SwapHelper conforme documenta√ß√£o
      console.log("üîÑ Carregando SwapHelper...")
      if (typeof this.swapHelper.load === "function") {
        await this.swapHelper.load()
        console.log("‚úÖ SwapHelper carregado!")
      }

      // 12. Verificar se tudo est√° funcionando
      console.log("üß™ Testando componentes...")
      console.log(`‚îú‚îÄ Client: ${!!this.client}`)
      console.log(`‚îú‚îÄ Multicall3: ${!!this.multicall3}`)
      console.log(`‚îú‚îÄ TokenProvider: ${!!this.tokenProvider}`)
      console.log(`‚îú‚îÄ Quoter: ${!!this.quoter}`)
      console.log(`‚îú‚îÄ SwapHelper: ${!!this.swapHelper}`)
      console.log(`‚îî‚îÄ Config: ${!!this.config?.client}`)

      this.initialized = true
      console.log("‚úÖ HoldStation SDK inicializado conforme DOCUMENTA√á√ÉO!")
    } catch (error) {
      console.error("‚ùå Erro ao inicializar conforme docs:", error)
      console.error("‚ùå Stack:", error.stack)
      this.initialized = false
      throw error
    }
  }

  // Obter saldos conforme documenta√ß√£o
  async getTokenBalances(walletAddress: string): Promise<TokenBalance[]> {
    try {
      await this.initialize()

      console.log(`üí∞ Obtendo saldos conforme docs para: ${walletAddress}`)

      if (!this.tokenProvider) {
        throw new Error("TokenProvider n√£o dispon√≠vel")
      }

      // Usar m√©todo do TokenProvider conforme documenta√ß√£o
      const balances = await this.tokenProvider.getTokenBalances(walletAddress)
      console.log("üìä Saldos obtidos conforme docs:", balances)

      // Processar conforme documenta√ß√£o
      const formattedBalances: TokenBalance[] = balances.map((balance: any) => ({
        symbol: balance.symbol,
        name: balance.name || balance.symbol,
        address: balance.address || balance.tokenAddress,
        balance: balance.balance || balance.amount || "0",
        decimals: balance.decimals || 18,
        icon: this.getTokenIcon(balance.symbol),
        formattedBalance: balance.formattedBalance || balance.balance || "0",
      }))

      console.log("‚úÖ Saldos formatados conforme docs:", formattedBalances)
      return formattedBalances
    } catch (error) {
      console.error("‚ùå Erro ao obter saldos conforme docs:", error)
      throw new Error(`Falha ao obter saldos: ${error.message}`)
    }
  }

  // Obter cota√ß√£o conforme documenta√ß√£o
  async getSwapQuote(params: {
    tokenIn: string
    tokenOut: string
    amountIn: string
    slippage?: string
  }): Promise<SwapQuote> {
    try {
      console.log("üö® === COTA√á√ÉO CONFORME DOCUMENTA√á√ÉO OFICIAL ===")
      console.log("üìã Par√¢metros:", params)

      await this.initialize()

      if (!this.quoter) {
        throw new Error("Quoter n√£o dispon√≠vel")
      }

      // Converter para wei conforme documenta√ß√£o
      const amountInWei = ethers.parseEther(params.amountIn)
      console.log(`üí∞ Amount: ${params.amountIn} ‚Üí ${amountInWei.toString()} wei`)

      // Usar Quoter conforme documenta√ß√£o
      console.log("üì° Chamando quoter.getQuote conforme docs...")
      const quoteParams = {
        tokenIn: params.tokenIn,
        tokenOut: params.tokenOut,
        amountIn: amountInWei.toString(),
        slippage: params.slippage || "3",
      }

      const quote = await this.quoter.getQuote(quoteParams)
      console.log("‚úÖ Cota√ß√£o obtida conforme docs:", quote)

      // Formatar resposta conforme documenta√ß√£o
      const formattedQuote: SwapQuote = {
        amountOut: quote.amountOut || "0",
        data: quote.data || "0x",
        to: quote.to || "0x0000000000000000000000000000000000000000",
        value: quote.value || "0",
        feeAmountOut: quote.feeAmountOut || "0",
        addons: {
          outAmount: quote.amountOut || "0",
          rateSwap: quote.rateSwap || "0",
          amountOutUsd: quote.amountOutUsd || "0",
          minReceived: quote.minReceived || "0",
          feeAmountOut: quote.feeAmountOut || "0",
        },
      }

      console.log("‚úÖ Cota√ß√£o formatada conforme docs:", formattedQuote)
      return formattedQuote
    } catch (error) {
      console.error("‚ùå Erro na cota√ß√£o conforme docs:", error)
      throw new Error(`Falha na cota√ß√£o: ${error.message}`)
    }
  }

  // Executar swap conforme documenta√ß√£o
  async executeSwap(params: {
    tokenIn: string
    tokenOut: string
    amountIn: string
    slippage?: string
  }): Promise<string> {
    try {
      console.log("üöÄ Executando swap conforme DOCUMENTA√á√ÉO...")
      console.log("üìã Par√¢metros:", params)

      await this.initialize()

      if (!this.swapHelper) {
        throw new Error("SwapHelper n√£o dispon√≠vel")
      }

      // Primeiro obter cota√ß√£o
      const quote = await this.getSwapQuote(params)

      // Executar swap conforme documenta√ß√£o
      console.log("üì° Chamando swapHelper.swap conforme docs...")
      const swapParams = {
        tokenIn: params.tokenIn,
        tokenOut: params.tokenOut,
        amountIn: params.amountIn,
        tx: {
          data: quote.data,
          to: quote.to,
        },
        fee: "0.3",
        feeAmountOut: quote.feeAmountOut,
        feeReceiver: "0x0000000000000000000000000000000000000000",
      }

      const txResult = await this.swapHelper.swap(swapParams)
      console.log("‚úÖ Swap executado conforme docs:", txResult)

      // Extrair hash conforme documenta√ß√£o
      const txHash = txResult.hash || txResult.transactionHash || txResult
      console.log("üìã Hash da transa√ß√£o:", txHash)

      return txHash
    } catch (error) {
      console.error("‚ùå Erro no swap conforme docs:", error)
      throw new Error(`Falha no swap: ${error.message}`)
    }
  }

  // Hist√≥rico conforme documenta√ß√£o
  async getTransactionHistory(walletAddress: string, offset = 0, limit = 50): Promise<any[]> {
    try {
      console.log("=== BUSCAR HIST√ìRICO CONFORME DOCUMENTA√á√ÉO ===")
      console.log(`Endere√ßo: ${walletAddress}`)
      console.log(`Offset: ${offset}, Limit: ${limit}`)

      if (!this.initialized) {
        console.log("‚ùå SDK n√£o inicializado - inicializando...")
        await this.initializeSDK()
      }

      if (!this.walletHistory) {
        console.log("‚ùå walletHistory n√£o dispon√≠vel - reinicializando...")
        await this.initializeSDK()
      }

      console.log("üì° Chamando walletHistory.fetch conforme documenta√ß√£o...")

      // Usar m√©todo conforme documenta√ß√£o
      const result = await this.walletHistory.fetch({
        address: walletAddress,
        offset,
        limit,
      })

      console.log("‚úÖ Hist√≥rico obtido:", result)
      console.log(`üìä Total de transa√ß√µes: ${result?.length || 0}`)

      return result || []
    } catch (error) {
      console.error("‚ùå Erro ao buscar hist√≥rico:", error.message)
      console.error("Stack:", error.stack)
      throw error
    }
  }

  private getTokenIcon(symbol: string): string {
    const icons: Record<string, string> = {
      TPF: "/logo-tpf.png",
      WLD: "/worldcoin.jpeg",
      DNA: "/dna-token.png",
      WDD: "/drachma-token.png",
    }
    return icons[symbol] || "/placeholder.svg"
  }

  // M√©todos auxiliares
  getSupportedTokens() {
    return SUPPORTED_TOKENS
  }

  isInitialized(): boolean {
    return this.initialized
  }

  getClient() {
    return this.client
  }

  getProvider() {
    return this.provider
  }

  getTokenProvider() {
    return this.tokenProvider
  }

  getQuoter() {
    return this.quoter
  }

  getSwapHelper() {
    return this.swapHelper
  }

  getSDKStatus() {
    return {
      initialized: this.initialized,
      hasProvider: !!this.provider,
      hasClient: !!this.client,
      hasTokenProvider: !!this.tokenProvider,
      hasQuoter: !!this.quoter,
      hasSwapHelper: !!this.swapHelper,
      hasMulticall3: !!this.multicall3,
      hasGlobalConfig: !!this.config?.client,
      sdkType: "OFICIAL - Seguindo documenta√ß√£o HoldStation",
      chainId: WORLDCHAIN_CONFIG.chainId,
      rpcUrl: WORLDCHAIN_CONFIG.rpcUrl,
    }
  }

  async debugSDK() {
    try {
      await this.initialize()
      console.log("=== DEBUG CONFORME DOCUMENTA√á√ÉO ===")
      console.log("Status:", this.getSDKStatus())
      return this.getSDKStatus()
    } catch (error) {
      console.error("Debug falhou:", error)
      return { error: error.message }
    }
  }

  async initializeSDK(): Promise<void> {
    try {
      console.log("üîß Inicializando APENAS hist√≥rico conforme documenta√ß√£o HoldStation...")

      // Importar m√≥dulos conforme documenta√ß√£o
      const { Client } = await import("@holdstation/sdk")
      const { config } = await import("@holdstation/sdk")

      console.log("‚úÖ M√≥dulos importados")

      // Criar provider
      const provider = new ethers.JsonRpcProvider("https://worldchain-mainnet.g.alchemy.com/public")
      console.log("‚úÖ Provider criado")

      // Criar client conforme documenta√ß√£o
      this.client = new Client({
        provider,
        chainId: 480,
      })

      console.log("‚úÖ Client criado conforme docs")

      // Configurar config global conforme documenta√ß√£o
      config.setGlobalConfig({
        client: this.client,
      })

      console.log("‚úÖ Config global definido")

      // Importar WalletHistory conforme documenta√ß√£o
      const { WalletHistory } = await import("@holdstation/sdk")

      // Criar WalletHistory conforme documenta√ß√£o
      this.walletHistory = new WalletHistory()

      console.log("‚úÖ WalletHistory criado conforme documenta√ß√£o")

      this.initialized = true
      console.log("‚úÖ SDK inicializado APENAS para hist√≥rico!")
    } catch (error) {
      console.error("‚ùå Erro ao inicializar SDK:", error.message)
      console.error("Stack:", error.stack)
      throw error
    }
  }

  getManager() {
    return this.manager
  }
}

console.log("‚úÖ HoldstationService definido conforme DOCUMENTA√á√ÉO")

export const holdstationService = new HoldstationService()

console.log("‚úÖ holdstationService criado conforme DOCS:", !!holdstationService)
console.log("üéØ HOLDSTATION SERVICE - SEGUINDO DOCUMENTA√á√ÉO OFICIAL")
