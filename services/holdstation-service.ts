import type { TokenBalance, SwapQuote } from "./types"
import { ethers } from "ethers"

// Configura√ß√£o para Worldchain conforme documenta√ß√£o
const WORLDCHAIN_CONFIG = {
  chainId: 480,
  rpcUrl: "https://worldchain-mainnet.g.alchemy.com/public",
  name: "worldchain",
}

console.log("üöÄ HOLDSTATION SERVICE - APENAS HIST√ìRICO")

class HoldstationService {
  private client: any = null
  private manager: any = null
  private provider: any = null
  private config: any = null
  private initialized = false

  constructor() {
    console.log("üîß HoldstationService constructor - APENAS HIST√ìRICO")
  }

  async getTransactionHistory(walletAddress: string, offset = 0, limit = 50): Promise<any[]> {
    try {
      console.log("=== BUSCAR HIST√ìRICO CONFORME DOCUMENTA√á√ÉO ===")
      console.log(`Endere√ßo: ${walletAddress}`)
      console.log(`Offset: ${offset}, Limit: ${limit}`)

      if (!this.initialized) {
        console.log("üîß Inicializando SDK conforme documenta√ß√£o...")
        await this.initializeSDK()
      }

      if (!this.manager) {
        throw new Error("Manager n√£o dispon√≠vel ap√≥s inicializa√ß√£o")
      }

      console.log("üì° Chamando manager para buscar hist√≥rico...")

      // Usar o manager conforme documenta√ß√£o
      const result = await this.manager.getTransactionHistory(walletAddress, {
        offset,
        limit,
      })

      console.log("‚úÖ Hist√≥rico obtido via HoldStation:", result)
      console.log(`üìä Total de transa√ß√µes: ${result?.length || 0}`)

      return result || []
    } catch (error) {
      console.error("‚ùå Erro ao buscar hist√≥rico:", error.message)
      console.error("Stack:", error.stack)
      throw error // SEM FALLBACK - falha se n√£o funcionar
    }
  }

  private async initializeSDK(): Promise<void> {
    try {
      console.log("üîß Inicializando SDK conforme documenta√ß√£o HoldStation...")

      // Importar m√≥dulos CORRETOS conforme documenta√ß√£o
      const [HoldstationModule, EthersModule] = await Promise.all([
        import("@holdstation/worldchain-sdk"),
        import("@holdstation/worldchain-ethers-v6"),
      ])

      console.log("‚úÖ M√≥dulos corretos importados")
      console.log("üìã HoldstationModule exports:", Object.keys(HoldstationModule))
      console.log("üìã EthersModule exports:", Object.keys(EthersModule))

      // Extrair componentes conforme documenta√ß√£o
      const { config } = HoldstationModule
      const { Client } = EthersModule

      console.log("‚úÖ Componentes extra√≠dos")

      // Criar provider
      this.provider = new ethers.JsonRpcProvider(WORLDCHAIN_CONFIG.rpcUrl, {
        chainId: WORLDCHAIN_CONFIG.chainId,
        name: WORLDCHAIN_CONFIG.name,
      })
      console.log("‚úÖ Provider criado")

      // Aguardar rede
      const network = await this.provider.getNetwork()
      console.log(`‚úÖ Rede conectada: ${network.name} (${network.chainId})`)

      // Criar client conforme documenta√ß√£o
      this.client = new Client(this.provider)
      console.log("‚úÖ Client criado conforme docs")

      // Configurar config global conforme documenta√ß√£o
      this.config = config
      this.config.client = this.client
      console.log("‚úÖ Config global definido")

      // Procurar por Manager ou WalletHistory nos m√≥dulos
      let ManagerClass = null
      let WalletHistoryClass = null

      // Tentar encontrar a classe correta para hist√≥rico
      if (HoldstationModule.Manager) {
        ManagerClass = HoldstationModule.Manager
        console.log("‚úÖ Encontrado HoldstationModule.Manager")
      } else if (HoldstationModule.WalletHistory) {
        WalletHistoryClass = HoldstationModule.WalletHistory
        console.log("‚úÖ Encontrado HoldstationModule.WalletHistory")
      } else if (EthersModule.Manager) {
        ManagerClass = EthersModule.Manager
        console.log("‚úÖ Encontrado EthersModule.Manager")
      } else if (EthersModule.WalletHistory) {
        WalletHistoryClass = EthersModule.WalletHistory
        console.log("‚úÖ Encontrado EthersModule.WalletHistory")
      }

      // Criar manager/history conforme documenta√ß√£o
      if (ManagerClass) {
        this.manager = new ManagerClass(this.client)
        console.log("‚úÖ Manager criado conforme documenta√ß√£o")
      } else if (WalletHistoryClass) {
        this.manager = new WalletHistoryClass(this.client)
        console.log("‚úÖ WalletHistory criado conforme documenta√ß√£o")
      } else {
        // Listar todas as classes dispon√≠veis para debug
        console.log("üîç Classes dispon√≠veis em HoldstationModule:", Object.keys(HoldstationModule))
        console.log("üîç Classes dispon√≠veis em EthersModule:", Object.keys(EthersModule))
        throw new Error("Nenhuma classe de hist√≥rico encontrada nos m√≥dulos")
      }

      this.initialized = true
      console.log("‚úÖ SDK inicializado APENAS para hist√≥rico!")
    } catch (error) {
      console.error("‚ùå Erro ao inicializar SDK:", error.message)
      console.error("Stack:", error.stack)
      this.initialized = false
      throw error // SEM FALLBACK
    }
  }

  // M√©todos m√≠nimos necess√°rios
  getSupportedTokens() {
    return {}
  }

  isInitialized(): boolean {
    return this.initialized
  }

  getManager() {
    return this.manager
  }

  getClient() {
    return this.client
  }

  getProvider() {
    return this.provider
  }

  // M√©todos n√£o usados para hist√≥rico
  async getTokenBalances(): Promise<TokenBalance[]> {
    throw new Error("getTokenBalances n√£o implementado - apenas hist√≥rico")
  }

  async getSwapQuote(): Promise<SwapQuote> {
    throw new Error("getSwapQuote n√£o implementado - apenas hist√≥rico")
  }

  async executeSwap(): Promise<string> {
    throw new Error("executeSwap n√£o implementado - apenas hist√≥rico")
  }

  getTokenProvider() {
    return null
  }

  getQuoter() {
    return null
  }

  getSwapHelper() {
    return null
  }

  getSDKStatus() {
    return {
      initialized: this.initialized,
      hasProvider: !!this.provider,
      hasClient: !!this.client,
      hasManager: !!this.manager,
      sdkType: "APENAS HIST√ìRICO - Conforme documenta√ß√£o HoldStation",
      chainId: WORLDCHAIN_CONFIG.chainId,
      rpcUrl: WORLDCHAIN_CONFIG.rpcUrl,
    }
  }

  async debugSDK() {
    try {
      if (!this.initialized) {
        await this.initializeSDK()
      }
      console.log("=== DEBUG APENAS HIST√ìRICO ===")
      console.log("Status:", this.getSDKStatus())
      return this.getSDKStatus()
    } catch (error) {
      console.error("Debug falhou:", error)
      return { error: error.message }
    }
  }
}

console.log("‚úÖ HoldstationService definido - APENAS HIST√ìRICO")

export const holdstationService = new HoldstationService()

console.log("üéØ HOLDSTATION SERVICE - APENAS HIST√ìRICO CONFORME DOCS")
